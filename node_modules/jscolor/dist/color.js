(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./color-regex", "./color-names", "./color-utils"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./color-regex"), require("./color-names"), require("./color-utils"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.colorRegex, global.colorNames, global.colorUtils);
    global.color = mod.exports;
  }
})(this, function (exports, _colorRegex, _colorNames, _colorUtils) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _colorRegex2 = _interopRequireDefault(_colorRegex);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var RGB = "rgb";
  var HSL = "hsl";
  var HEX = "hex";

  function exists() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args.length > 0 && args.every(function (arg) {
      return arg !== null && arg !== undefined;
    });
  }

  var Color = function () {
    function Color(color) {
      _classCallCheck(this, Color);

      this.state = {
        r: 0,
        g: 0,
        b: 0,
        h: null,
        s: null,
        l: null,
        a: 1
      };
      if (color) {
        this.from(color);
      }
    }

    _createClass(Color, [{
      key: "setRGB",
      value: function setRGB(_ref) {
        var r = _ref.r,
            g = _ref.g,
            b = _ref.b;

        this.state.r = r;
        this.state.g = g;
        this.state.b = b;
        this.state.h = null;
        this.state.s = null;
        this.state.l = null;
      }
    }, {
      key: "setHSL",
      value: function setHSL(_ref2) {
        var h = _ref2.h,
            s = _ref2.s,
            l = _ref2.l;

        this.state.r = null;
        this.state.g = null;
        this.state.b = null;
        this.state.h = h;
        this.state.s = s;
        this.state.l = l;
      }
    }, {
      key: "getRGB",
      value: function getRGB() {
        var _state = this.state,
            r = _state.r,
            g = _state.g,
            b = _state.b,
            h = _state.h,
            s = _state.s,
            l = _state.l;

        if (!exists(r, g, b)) {
          var rgb = (0, _colorUtils.hslToRGB)(h, s, l);
          this.state.r = rgb.r;
          this.state.g = rgb.g;
          this.state.b = rgb.b;
        }
        return {
          r: this.state.r,
          g: this.state.g,
          b: this.state.b
        };
      }
    }, {
      key: "getHSL",
      value: function getHSL() {
        var _state2 = this.state,
            r = _state2.r,
            g = _state2.g,
            b = _state2.b,
            h = _state2.h,
            s = _state2.s,
            l = _state2.l;

        if (!exists(h, s, l)) {
          var hsl = (0, _colorUtils.rgbToHSL)(r, g, b);
          this.state.h = hsl.h;
          this.state.s = hsl.s;
          this.state.l = hsl.l;
        }
        return {
          h: this.state.h,
          s: this.state.s,
          l: this.state.l
        };
      }
    }, {
      key: "from",
      value: function from(color) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (!color) {
          throw new Error("No color provided");
        } else if (typeof color === "string") {
          this.fromString(color, type);
        } else if (typeof color === "number") {
          this.fromNumber(color, type);
        } else if (Array.isArray(color)) {
          this.fromArray(color, type);
        } else {
          this.fromObject(color, type);
        }
      }
    }, {
      key: "fromString",
      value: function fromString(color) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (typeof color !== "string") return;

        color = color.replace(/^\s+/, "").replace(/\s+$/, "").toLowerCase();

        if (_colorNames.colorNames[color]) {
          color = _colorNames.colorNames[color];
        } else if (color === "transparent") {
          this.state.a = 0;
          return;
        }

        var match = void 0;
        if (match = _colorRegex2.default.rgb.exec(color)) {
          this.setRGB((0, _colorUtils.ensureRGB)(match[1], match[2], match[3]));
        } else if (match = _colorRegex2.default.rgba.exec(color)) {
          this.setRGB((0, _colorUtils.ensureRGB)(match[1], match[2], match[3]));
          this.state.a = (0, _colorUtils.ensureAlpha)(match[4]);
        } else if (match = _colorRegex2.default.hsl.exec(color)) {
          this.setHSL((0, _colorUtils.ensureHSL)(match[1], match[2], match[3]));
        } else if (match = _colorRegex2.default.hsla.exec(color)) {
          this.setHSL((0, _colorUtils.ensureHSL)(match[1], match[2], match[3]));
          this.state.a = (0, _colorUtils.ensureAlpha)(match[4]);
        } else if (match = _colorRegex2.default.hex6.exec(color)) {
          var rgb = match.map(function (v) {
            return parseInt(v, 16);
          });
          this.setRGB((0, _colorUtils.ensureRGB)(rgb[1], rgb[2], rgb[3]));
        } else if (match = _colorRegex2.default.hex3.exec(color)) {
          var _rgb = match.map(function (v) {
            return parseInt(v + "" + v, 16);
          });
          this.setRGB((0, _colorUtils.ensureRGB)(_rgb[1], _rgb[2], _rgb[3]));
        }
      }
    }, {
      key: "fromNumber",
      value: function fromNumber(num) {
        if (typeof num !== "number") return;
        var match = void 0;
        var color = "" + num;
        if (match = _colorRegex2.default.hex6.exec(color)) {
          var rgb = match.map(function (v) {
            return parseInt(v, 16);
          });
          this.setRGB((0, _colorUtils.ensureRGB)(rgb[1], rgb[2], rgb[3]));
        } else if (match = _colorRegex2.default.hex3.exec(color)) {
          var _rgb2 = match.map(function (v) {
            return parseInt(v + "" + v, 16);
          });
          this.setRGB((0, _colorUtils.ensureRGB)(_rgb2[1], _rgb2[2], _rgb2[3]));
        }
      }
    }, {
      key: "fromObject",
      value: function fromObject(obj) {
        if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) !== "object") return;
        if (exists(obj.r, obj.g, obj.b)) {
          this.setRGB((0, _colorUtils.ensureRGB)(obj.r, obj.g, obj.b));
        } else if (exists(obj.h, obj.s, obj.l)) {
          this.setHSL((0, _colorUtils.ensureHSL)(obj.h, obj.s, obj.l));
        }
        if (exists(obj.a)) {
          this.state.a = (0, _colorUtils.ensureAlpha)(obj.a);
        }
      }
    }, {
      key: "fromArray",
      value: function fromArray(arr) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : RGB;

        if (!Array.isArray(arr)) return;
        if (exists(arr[0], arr[1], arr[2])) {
          if (type === HSL) {
            this.setHSL((0, _colorUtils.ensureHSL)(arr[0], arr[1], arr[2]));
          } else {
            this.setRGB((0, _colorUtils.ensureRGB)(arr[0], arr[1], arr[2]));
          }
        }
        if (exists(arr[3])) {
          this.state.a = (0, _colorUtils.ensureAlpha)(arr[3]);
        }
      }
    }, {
      key: "hue",
      get: function get() {
        var _getHSL = this.getHSL(),
            h = _getHSL.h;

        return Math.round(h);
      },
      set: function set(h) {
        var _getHSL2 = this.getHSL(),
            s = _getHSL2.s,
            l = _getHSL2.l;

        h = (0, _colorUtils.ensureHue)(h);
        this.setHSL({ h: h, s: s, l: l });
      }
    }, {
      key: "saturation",
      get: function get() {
        var _getHSL3 = this.getHSL(),
            s = _getHSL3.s;

        return Math.round(s);
      },
      set: function set(s) {
        var _getHSL4 = this.getHSL(),
            h = _getHSL4.h,
            l = _getHSL4.l;

        s = (0, _colorUtils.ensureValue)(s, 100);
        this.setHSL({ h: h, s: s, l: l });
      }
    }, {
      key: "lightness",
      get: function get() {
        var _getHSL5 = this.getHSL(),
            l = _getHSL5.l;

        return Math.round(l);
      },
      set: function set(l) {
        var _getHSL6 = this.getHSL(),
            h = _getHSL6.h,
            s = _getHSL6.s;

        l = (0, _colorUtils.ensureValue)(l, 100);
        this.setHSL({ h: h, s: s, l: l });
      }
    }, {
      key: "red",
      get: function get() {
        var _getRGB = this.getRGB(),
            r = _getRGB.r;

        return Math.round(r);
      },
      set: function set(r) {
        var _getRGB2 = this.getRGB(),
            g = _getRGB2.g,
            b = _getRGB2.b;

        r = (0, _colorUtils.ensureValue)(r, 255);
        this.setRGB({ r: r, g: g, b: b });
      }
    }, {
      key: "green",
      get: function get() {
        var _getRGB3 = this.getRGB(),
            g = _getRGB3.g;

        return Math.round(g);
      },
      set: function set(g) {
        var _getRGB4 = this.getRGB(),
            r = _getRGB4.r,
            b = _getRGB4.b;

        g = (0, _colorUtils.ensureValue)(g, 255);
        this.setRGB({ r: r, g: g, b: b });
      }
    }, {
      key: "blue",
      get: function get() {
        var _getRGB5 = this.getRGB(),
            b = _getRGB5.b;

        return Math.round(b);
      },
      set: function set(b) {
        var _getRGB6 = this.getRGB(),
            r = _getRGB6.r,
            g = _getRGB6.g;

        b = (0, _colorUtils.ensureValue)(b, 255);
        this.setRGB({ r: r, g: g, b: b });
      }
    }, {
      key: "alpha",
      get: function get() {
        return this.state.a;
      },
      set: function set(a) {
        this.state.a = (0, _colorUtils.ensureAlpha)(a);
      }
    }, {
      key: "rgb",
      get: function get() {
        var rgb = Object.values(this.getRGB()).map(function (v) {
          return Math.round(v);
        }).join(",");
        return "rgb(" + rgb + ")";
      },
      set: function set(rgb) {
        this.from(rgb, RGB);
      }
    }, {
      key: "rgba",
      get: function get() {
        var rgb = Object.values(this.getRGB()).map(function (v) {
          return Math.round(v);
        }).join(",");
        return "rgba(" + rgb + "," + this.state.a + ")";
      },
      set: function set(rgba) {
        this.from(rgba, RGB);
      }
    }, {
      key: "hsl",
      get: function get() {
        var hsl = Object.values(this.getHSL()).map(function (v) {
          return Math.round(v);
        }).map(function (v, i) {
          return i > 0 ? v + "%" : v;
        }).join(",");
        return "hsl(" + hsl + ")";
      },
      set: function set(hsl) {
        this.from(hsl, HSL);
      }
    }, {
      key: "hsla",
      get: function get() {
        var hsl = Object.values(this.getHSL()).map(function (v) {
          return Math.round(v);
        }).map(function (v, i) {
          return i > 0 ? v + "%" : v;
        }).join(",");
        return "hsla(" + hsl + "," + this.state.a + ")";
      },
      set: function set(hsla) {
        this.from(hsla, HSL);
      }
    }, {
      key: "hex",
      get: function get() {
        var hex = Object.values(this.getRGB()).map(function (v) {
          return Math.round(v);
        }).map(function (v) {
          return v.toString(16);
        }).map(function (v) {
          return v.length === 2 ? v : "0" + v;
        }).join("");
        return "#" + hex;
      },
      set: function set(hex) {
        this.from(hex);
      }
    }, {
      key: "name",
      get: function get() {
        var hex = Object.values(this.getRGB()).map(function (v) {
          return Math.round(v);
        }).map(function (v) {
          return v.toString(16);
        }).map(function (v) {
          return v.length === 2 ? v : "0" + v;
        }).join("");
        return _colorNames.nameLookup[hex] || false;
      },
      set: function set(name) {
        this.fromString(name);
      }
    }, {
      key: "yiq",
      get: function get() {
        var hex = this.hex;

        var r = parseInt(hex.substr(1, 2), 16);
        var g = parseInt(hex.substr(3, 2), 16);
        var b = parseInt(hex.substr(5, 2), 16);
        return (r * 299 + g * 587 + b * 114) / 1000;
      }
    }, {
      key: "h",
      get: function get() {
        return this.hue;
      },
      set: function set(h) {
        this.hue = h;
      }
    }, {
      key: "s",
      get: function get() {
        return this.saturation;
      },
      set: function set(s) {
        this.saturation = s;
      }
    }, {
      key: "l",
      get: function get() {
        return this.lightness;
      },
      set: function set(l) {
        this.lightness = l;
      }
    }, {
      key: "r",
      get: function get() {
        return this.red;
      },
      set: function set(r) {
        this.red = r;
      }
    }, {
      key: "g",
      get: function get() {
        return this.green;
      },
      set: function set(g) {
        this.green = g;
      }
    }, {
      key: "b",
      get: function get() {
        return this.blue;
      },
      set: function set(b) {
        this.blue = b;
      }
    }, {
      key: "a",
      get: function get() {
        return this.alpha;
      },
      set: function set(a) {
        this.alpha = a;
      }
    }]);

    return Color;
  }();

  exports.default = Color;
});